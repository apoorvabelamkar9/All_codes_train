

void water_raise()
  	{ 
  		int i;
  		Bits1_PutVal(0xe0);
  					 for(i=0;i<0x100fff; i++);
  					 Bits1_PutVal(0xd0);
  					 for(i=0;i<0x100fff;i++);
  					 Bits1_PutVal(0xb0);                                                                                                                                         
  					 for(i=0;i<0x100fff; i++);
  					 Bits1_PutVal(0x
  					 for(i=0;i<0x100fff; i++); 
  			     Bits1_PutVal(0xf1);
  				 for(i=0;i<0x100fff; i++);
  				 Bits1_PutVal(0xf2);
  				 for(i=0;i<0x100fff; i++);
  				 Bits1_PutVal(0xf4);
  				 for(i=0;i<0x100fff; i++);
  				 Bits1_PutVal(0xf8);
  				 for(i=0;i<0x100fff; i++);
  	}

void water_fall()
  	{
	int i;
  		             Bits1_PutVal(0x70);
  					 for(i=0;i<0x100fff; i++);
  					 Bits1_PutVal(0xb0);
  					 for(i=0;i<0x100fff;i++);
  					 Bits1_PutVal(0xd0);                                                                                                                                         
  					 for(i=0;i<0x100fff; i++);
  					 Bits1_PutVal(0xe
  					 for(i=0;i<0x100fff; i++); 
  					 
  			     Bits1_PutVal(0xf8);
  				 for(i=0;i<0x100fff; i++);
  				 Bits1_PutVal(0xf4);
  				 for(i=0;i<0x100fff; i++);
  				 Bits1_PutVal(0xf2);
  				 for(i=0;i<0x100fff; i++);
  				 Bits1_PutVal(0xf1);
  				 for(i=0;i<0x100fff; i++);
  	}
  	







///.....WORKING ON COMMON CATHODE AND ANODE ---------4bits separte 2 bits






#include "Cpu.h"
#include "Events.h"
#include "LED_CC.h"
#include "BitsIoLdd1.h"
#include "LED_CA.h"
#include "BitsIoLdd2.h"
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"


void LLDD_CA_Leds(unsigned char ucUserData)
{
	LED_CA_PutVal(~ucUserData);
}

void LLDD_CC_Leds(unsigned char ucUserData)
{
	LED_CC_PutVal(ucUserData);
}


int main(void)
{
unsigned char i;
long int j;


 
  PE_low_level_init();
  
	while(1)
	{
		for(i=0x8;i>0;i=i>>1)
		{
			LLDD_CA_Leds(i);
			for(j=0;j<0x100fff;j++);
		}
		for(i=0x8;i>0;i=i>>1)
		{
			LLDD_CC_Leds(i);
			for(j=0;j<0x100fff;j++);
		}
  	}
  	
 
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  
  for(;;){}
  
}



/////////////////------8bit together anode and cathode



#include "Cpu.h"
#include "Events.h"
#include "LED_CACC.h"
#include "BitsIoLdd1.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"


void LLDD_CA7654_CC3210_Leds(unsigned char ucUserData)
{
	unsigned char ucCAData,ucCCData;
	ucCAData=ucUserData;
	ucCAData=~ucCAData;
	ucCAData=ucCAData & 0Xf0;
	
	ucCCData=ucUserData & 0x0f;
	ucUserData=ucCAData | ucCCData;
	LED_CACC_PutVal(ucUserData);
}



int main(void)
{
unsigned char i;
long int  j;


  PE_low_level_init();
  
	while(1)
	{
		for(i=0x80;i>0;i=i>>1)
		{
			LLDD_CA7654_CC3210_Leds(i);
			for(j=0;j<0x7fff;j++);
		}
		
  	}
  	

    PEX_RTOS_START();                  
  for(;;){}
}








/////------------------------WATER FALL MODEL USING 8BIT




#include "Cpu.h"
#include "Events.h"
#include "LED_CACC.h"
#include "BitsIoLdd1.h"
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"


void LLDD_CA7654_CC3210_Leds(unsigned char ucUserData)
{
	unsigned char ucCAData,ucCCData;
	ucCAData=ucUserData;
	ucCAData=~ucCAData;
	ucCAData=ucCAData & 0Xf0;
	
	ucCCData=ucUserData & 0x0f;
	ucUserData=ucCAData | ucCCData;
	LED_CACC_PutVal(ucUserData);
}


int main(void)
{
unsigned char i;
long int  j;

  PE_low_level_init();
  
	while(1)
	{
		for(i=0x80;i>0;i=i>>1)
		{
			LLDD_CA7654_CC3210_Leds(i);
			for(j=0;j<0x100fff;j++);
		}
		
  	}
  	
  
  for(;;){}
  
}





////--------------------------------WATER RAISING USING 8BIT


#include "Cpu.h"
#include "Events.h"
#include "LED_CACC.h"
#include "BitsIoLdd1.h"
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"


void WF_LLDD_CA7654_CC3210_Leds(unsigned char ucUserData)
{
	unsigned char ucCAData,ucCCData;
	ucCAData=ucUserData;
	ucCAData=~ucCAData;
	ucCAData=ucCAData & 0Xf0;
	
	ucCCData=ucUserData & 0x0f;
	ucUserData=ucCAData | ucCCData;
	LED_CACC_PutVal(ucUserData);
}

void WR_LLDD_CA7654_CC3210_Leds(unsigned char ucUserData)
{
	unsigned char ucCAData,ucCCData;
	ucCAData=ucUserData;
	ucCAData=~ucCAData;
	ucCAData=ucCAData & 0Xf0;
	
	ucCCData=ucUserData & 0x0f;
	ucUserData=ucCAData | ucCCData;
	LED_CACC_PutVal(ucUserData);
}

int main(void)
{
unsigned char i;
long int  j;


 
  PE_low_level_init();
  
	while(1)
	{   
		for(i=0x01;i>0;i=i<<1)
		{
			//WF_LLDD_CA7654_CC3210_Leds(i);
			WR_LLDD_CA7654_CC3210_Leds(i);
			for(j=0;j<0x100fff;j++);
		}
		
  	}
  	
  
    PEX_RTOS_START();                  
  for(;;){}
  
}





///-----------------------------REVERSE BOUNCE-----------------------------///


#include "Cpu.h"
#include "Events.h"
#include "LED_CACC.h"
#include "BitsIoLdd1.h"
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"


void WF_LLDD_CA7654_CC3210_Leds(unsigned char ucUserData)
{
	unsigned char ucCAData,ucCCData;
	ucCAData=ucUserData;
	ucCAData=~ucCAData;
	ucCAData=ucCAData & 0Xf0;
	
	ucCCData=ucUserData & 0x0f;
	ucUserData=ucCAData | ucCCData;
	LED_CACC_PutVal(ucUserData);
}

void WR_LLDD_CA7654_CC3210_Leds(unsigned char ucUserData)
{
	unsigned char ucCAData,ucCCData;
	ucCAData=ucUserData;
	ucCAData=~ucCAData;
	ucCAData=ucCAData & 0Xf0;
	
	ucCCData=ucUserData & 0x0f;
	ucUserData=ucCAData | ucCCData;
	LED_CACC_PutVal(ucUserData);
}

int main(void)
{
unsigned char i;
long int  j;




  PE_low_level_init();
  
	while(1)
	{   
		unsigned char m;
		unsigned char k;
		
	      for(m=0x80; m>0; m=m>>1)
{

		for(i=m;i>0;i=i>>1)
				{ 
					WF_LLDD_CA7654_CC3210_Leds(i);
					for(j=0;j<0x100fff;j++);
				}
		for(i=01;i<m;i=i<<1)
		{
			
			WR_LLDD_CA7654_CC3210_Leds(i);
			for(j=0;j<0x100fff;j++);
		}
	
	}
}
	
  
    PEX_RTOS_START();                 
  for(;;){}
  
}










///----------BOUNCING LEDS------------///


#include "Cpu.h"
#include "Events.h"
#include "LED_CACC.h"
#include "BitsIoLdd1.h"
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"


void WF_LLDD_CA7654_CC3210_Leds(unsigned char ucUserData)
{
	unsigned char ucCAData,ucCCData;
	ucCAData=ucUserData;
	ucCAData=~ucCAData;
	ucCAData=ucCAData & 0Xf0;
	
	ucCCData=ucUserData & 0x0f;
	ucUserData=ucCAData | ucCCData;
	LED_CACC_PutVal(ucUserData);
}

void WR_LLDD_CA7654_CC3210_Leds(unsigned char ucUserData)
{
	unsigned char ucCAData,ucCCData;
	ucCAData=ucUserData;
	ucCAData=~ucCAData;
	ucCAData=ucCAData & 0Xf0;
	
	ucCCData=ucUserData & 0x0f;
	ucUserData=ucCAData | ucCCData;
	LED_CACC_PutVal(ucUserData);
}

int main(void)
{
unsigned char i;
long int  j;




  PE_low_level_init();
 

	while(1)
	{   
		unsigned char m;
		unsigned char k;
		
	      for(m=0x80; m>0; m=m>>1)
{

		for(i=m;i>0;i=i>>1)
				{ 
					WF_LLDD_CA7654_CC3210_Leds(i);
					for(j=0;j<0x100fff;j++);
				}
		for(i=01;i<m;i=i<<1)
		{
			
			WR_LLDD_CA7654_CC3210_Leds(i);
			for(j=0;j<0x100fff;j++);
		}
	
	}
}
	
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();
 #endif                  

  for(;;){}
 
}







///-------------------7 SEGMENT RUNNING NUMBERS-----------------------------////





#include "Cpu.h"
#include "Events.h"
#include "S7_LED_CC.h"
#include "BitsIoLdd1.h"
#include "S7_LED_CA.h"
#include "BitsIoLdd2.h"
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"





int main(void)
{

unsigned char s7CC[]={0x3f,0x30,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x71,0x00};
unsigned char s7CA[]={0x80,0xc0,0xf9,0xa4,0xb0,0x92,0x82,0xf8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e};
char *p;
char *p1;
long int j;

//char s7CA[]={0xc0,0xf9,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x71,0x00};

/*lint -restore Enable MISRA rule (6.3) checking. */

  /* Write your local variable definition here */
	
  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  
	while(1)
	{   
    for(p=s7CC;p<s7CC+16;p++)
    
    {
      
       S7_LED_CC_PutVal(*p);
       for(j=0;j<0x100fff;j++);
    
    for(p1=s7CA;p1<s7CA+16;p1++)
       
       {
    	
          S7_LED_CA_PutVal(*p1);
          for(j=0;j<0x100fff;j++);
       }
    }
 
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  
  #endif
  
}
}








////--------------------------STANDING NUMBERS---------////


#include "Cpu.h"
#include "Events.h"
#include "Trigger.h"
//#include "S7_LED_CC.h"
#include "BitsIoLdd1.h"
//#include "S7_LED_CA.h"
#include "BitsIoLdd2.h"
#include "Datapin.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */



/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
{

unsigned char s7CA[]={0x40,0xf9,0x24,0x30,0x19,0x12,0x02,0xf8,0x00,0x10,0x08,0x03,0x46,0x21,0x06,0x0e};
//unsigned char Tig[] = {0x7,0xb,0xd,0xe};

unsigned int p;   
//unsigned char *t1;
long int j;

//char s7CA[]={0xc0,0xf9,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x71,0x00};


  PE_low_level_init();
  
	while(1)
	{   
	 
	
 for(p=0;p<4;p++)
  
  {

    	
             Trigger_PutVal(0x7);
             Datapin_PutVal(s7CA[p]);
             for(j=0;j<0xfff;j++);
             p++;
             
            
             Trigger_PutVal(0xb);
             Datapin_PutVal(s7CA[p]);
             for(j=0;j<0xfff;j++);
             p++;
             
          
             Trigger_PutVal(0xd);
             Datapin_PutVal(s7CA[p]);
             for(j=0;j<0xfff;j++);
             p++;
          
             Trigger_PutVal(0xe);
             Datapin_PutVal(s7CA[p]);
             for(j=0;j<0xfff;j++);
             
             
          
    }

  for(;;){}
  
}









//////////////---------------------------digital clock-------------------------///////


#include "Cpu.h"
#include "Events.h"
#include "Trigger.h"
//#include "S7_LED_CC.h"
#include "BitsIoLdd1.h"
//#include "S7_LED_CA.h"
#include "BitsIoLdd2.h"
#include "Datapin.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */



/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
{

unsigned char s7CA[]={0x40,0xf9,0x24,0x30,0x19,0x12,0x02,0xf8,0x00,0x10,0x08,0x03,0x46,0x21,0x06,0x0e};
//unsigned char Tig[] = {0x7,0xb,0xd,0xe};

unsigned int p1,p2,p3,p4,i;   
//unsigned char *t1;
long int j;

//char s7CA[]={0xc0,0xf9,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x71,0x00};


  PE_low_level_init();
  
	while(1)
	{   
 for(p1=0;p1<6;p1++)
 {
	 for(p2=0;p2<9;p2++)
	 {
		 for(p3=0;p3<6;p3++)
		 {
			 for(p4=0;p4<9;p4++)
			 {
  
				 for(i=0;i<50;i++)
				 {
   
	         
             Datapin_PutVal(s7CA[p1]);
             Trigger_ClrVal();
             for(j=0;j<0xfff;j++);
             Trigger_SetVal();
             p1++;
 
             Datapin_PutVal(s7CA[p2]);
             Trigger_ClrVal();
             for(j=0;j<0xfff;j++);
             Trigger_SetVal();
             p2++;
             

             Datapin_PutVal(s7CA[p3]);
             Trigger_ClrVal();
             for(j=0;j<0xfff;j++);
             Trigger_SetVal();
             p3++;
            
             Datapin_PutVal(s7CA[p4]); 
             Trigger_ClrVal();
             for(j=0;j<0xfff;j++);
             Trigger_SetVal();
             p4++;
      
    
}
	}
	}
	}
	}
	}

  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
 
  for(;;){}
 
}

/////////---------------Sub rountines with Digital clock------------///////


#include "Cpu.h"
#include "Events.h"
#include "Trigger.h"
//#include "S7_LED_CC.h"
#include "BitsIoLdd1.h"
//#include "S7_LED_CA.h"
#include "BitsIoLdd2.h"
#include "Datapin.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

void Trigger(unsigned char t1,unsigned char t2,unsigned char t3, unsigned char t4)
{


	long int j;
  	
	             Trigger_PutVal(0x7);
	             Datapin_PutVal(t4);
	             for(j=0;j<0xfff;j++);

	             Trigger_PutVal(0xb);
	             Datapin_PutVal(t3);
	             for(j=0;j<0xfff;j++);



	             Trigger_PutVal(0xd);
	             Datapin_PutVal(t2);
	             for(j=0;j<0xfff;j++);
	      
	             Trigger_PutVal(0xe);
	             Datapin_PutVal(t1);
	             for(j=0;j<0xfff;j++);
		
}
int main(void)
{
unsigned char s7CA[]={0x40,0xf9,0x24,0x30,0x19,0x12,0x02,0xf8,0x00,0x10,0x08,0x03,0x46,0x21,0x06,0x0e};
int p1,p2,p3,p4;



  /* Write your code here */
  /* For example: for(;;) { } */
	while(1)
	{   

		 for(p1=0;p1<6;p1++)
		 {
			 for(p2=0;p2<10;p2++)
			 {
				 for(p3=0;p3<6;p3++)
				 {
					 for(p4=0;p4<10;p4++)
					 {
		               Trigger(s7CA[p1],s7CA[p2],s7CA[p3],s7CA[p4]);
						
					 }
				 }
			 }
		 }
    
}
	
	
 
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  
  for(;;){}
 
}

/////----------------------------------------------KEYPAD RECOGNITION------------------------------//////


#include "Cpu.h"
#include "Events.h"
#include "rows.h"
#include "BitsIoLdd1.h"
#include "columns.h"
#include "BitsIoLdd2.h"
#include "led.h"
#include "BitsIoLdd3.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"


int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  
  PE_low_level_init();
 

  
 while(1)
 { int  r,c;
	rows_SetDir(1);
	columns_SetDir(1);
	rows_PutVal(0x0);
	columns_PutVal(0xf);
	columns_SetDir(0);
	c=columns_GetVal();
	rows_SetDir(1);
	columns_SetDir(1);
	rows_PutVal(0xf);
	columns_PutVal(0x0);
	rows_SetDir(0);
	r=rows_GetVal();
	if(r==0xe && c==0xe)
	{
	led_PutVal(0x1);

	}
	else if(r==0xe && c==0xd)
	{
	led_PutVal(0x2);

	}
	else if(r==0xe && c==0xb)
	{
	led_PutVal(0x3);
	}
	else if(r==0xe && c==0x7)
	{

	led_PutVal(0x4);
	}
	else if(r==0xd && c==0xe)
	{
	led_PutVal(0x5);
	}
	else if(r==0xd && c==0xd)
	{
	led_PutVal(0x6);
	}
	else if(r==0xd && c==0xb)
	{
	led_PutVal(0x7);
	}
	else if(r==0xd && c==0x7)
	{
	led_PutVal(0x8);
	}
	else if(r==0xb && c==0xe)
	{
	led_PutVal(0x9);
	}
	else if(r==0xb && c==0xd)
	{
	led_PutVal(0xa);
	}
	else if(r==0xb && c==0xb)
	{
	led_PutVal(0xb);
	}
	else if(r==0xb && c==0x7)
	{
	led_PutVal(0xc);
	}
	else if(r==0x7 && c==0xe)
	{
	led_PutVal(0xd);
	}
	else if(r==0x7 && c==0xd)
	{
	led_PutVal(0xe);
	}
	else if(r==0x7 && c==0xb)
	{
	led_PutVal(0xf);
	}
	else if(r==0x7 && c==0x7)
	{
	led_PutVal(0x0);
	}


	  }

  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                 
  
  for(;;){}
 
} 

//----------------------MICROCONTROLLER LED ON----------------------///


#include "Cpu.h"
#include "Events.h"
#include "Redled.h"
#include "BitIoLdd1.h"
#include "SW1.h"
#include "BitIoLdd2.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"


int main(void)


int i;
 
  PE_low_level_init();
  
while(1)
{
	
	Redled_PutVal(0);
	for(i=0; i<0x7ffff;i++);
	Redled_PutVal(1);
	for(i=0; i<0x7ffff;i++);
}
  
  
  
  
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  
  for(;;){}
  
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/




///---------------------------------SWITCHING ON LED USINH SWITCH BY CLICKING ON SWITCH----------------------------//
/* ###################################################################
**     Filename    : ProcessorExpert.c
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2022-10-11, 11:55, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file ProcessorExpert.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup ProcessorExpert_module ProcessorExpert module documentation
**  @{
*/         
/* MODULE ProcessorExpert */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Redled.h"
#include "BitIoLdd1.h"
#include "SW1.h"
#include "BitIoLdd2.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)

/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */
//int i;
  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  /* For example: for(;;) { } */
while(1)
{
	if(SW1_GetVal() == 0)
	{
	Redled_PutVal(0); // switch on led
	}
	//for(i=0; i<0x7ffff;i++);
	Redled_PutVal(1);  // switch off led
	//for(i=0; i<0x7ffff;i++);
}
  
  
  
  
  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END ProcessorExpert */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/







///////-------ALL TOGETHER LEDS GLOWING------////
/* ###################################################################
**     Filename    : ProcessorExpert.c
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2022-10-11, 12:34, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file ProcessorExpert.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup ProcessorExpert_module ProcessorExpert module documentation
**  @{
*/         
/* MODULE ProcessorExpert */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "SW1359.h"
#include "BitsIoLdd1.h"
#include "Redled.h"
#include "BitIoLdd1.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  /* For example: for(;;) { } */
  while(1)
  { 
  switch(SW1359_GetVal())
  {
	
	case (0xe):if(SW1359_GetVal() == 1)
	          {
		
	           Redled_PutVal(0); // switch on led
	          
	          }
               Redled_PutVal(1);
               break;
  	       
	       
  	
	case (0xd):if(SW1359_GetVal() == 1)
               {

               Redled_PutVal(0); // switch on led
    
               }
               Redled_PutVal(1);
               break;
   
		    
	case (0xb):if(SW1359_GetVal() == 1)
               {

               Redled_PutVal(0); // switch on led

               }
               Redled_PutVal(1);
               break;
                
	case (0x7):if(SW1359_GetVal() == 1)
               {
               Redled_PutVal(0); // switch on led
               }
              Redled_PutVal(1);
              break;
	
	
  }
  }
    

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END ProcessorExpert */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/



//----------------------------------------INCREMENT AND DECREMENT BUTTON USING SWITCH-------------------------------//
/* ###################################################################
**     Filename    : ProcessorExpert.c
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2022-10-11, 14:35, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file ProcessorExpert.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup ProcessorExpert_module ProcessorExpert module documentation
**  @{
*/         
/* MODULE ProcessorExpert */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "INCRE_CC.h"
#include "BitsIoLdd1.h"
#include "DECRE_CA.h"
#include "BitsIoLdd2.h"
#include "SW1.h"
#include "BitIoLdd1.h"
#include "SW2.h"
#include "BitIoLdd2.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */
	unsigned char s7CC[]={0x3f,0x30,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
	unsigned char s7CA[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
	//char *p;
	//char *p1;
	
	int i=0,j=0;
	long int z;
  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/
  INCRE_CC_PutVal(s7CC[0]);
  DECRE_CA_PutVal(s7CA[0]);
  /* Write your code here */
  /* For example: for(;;) { } */
  while(1)
  	{   
      if(SW1_GetVal()==0)
      {
    	  j++;
    	  if(j==10)
    	  {
    		  j = 0;                                                                               
    		  i++ ;
//    		  INCRE_CC_PutVal(s7CC[i]);
    	  }
  //		INCRE_CC_PutVal(s7CC[j]);

  		
  		DECRE_CA_PutVal(s7CA[j]);
		INCRE_CC_PutVal(s7CC[i]);
    	  for(z=0;z<0x7ffff; z++);
      }

      if(SW2_GetVal()==0)
		{
			j-- ;                                       
			if(j==-1)
			{
				j=9;
				i-- ;
	//			DECRE_CA_PutVal(s7CA[i]);
			}
//			DECRE_CA_PutVal(s7CA[j]);
			
			
	  		DECRE_CA_PutVal(s7CA[j]);
			INCRE_CC_PutVal(s7CC[i]);

			for(z=0;z<0x7ffff; z++);		
		}
//      if(j==10 ){
//    	  j=0;
//      }
//      
//      if(i==10 ){
//          	  i=0;
//      }
  	}
  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
  	} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END ProcessorExpert */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/



/////////----- without subroutines-----ERROR CODE---
/* ###################################################################
**     Filename    : ProcessorExpert.c
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Version     : Driver 01.01
**     Compiler    : GNU C Compiler
**     Date/Time   : 2022-10-12, 09:11, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file ProcessorExpert.c
** @version 01.01
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup ProcessorExpert_module ProcessorExpert module documentation
**  @{
*/         
/* MODULE ProcessorExpert */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Datapin.h"
#include "BitsIoLdd1.h"
#include "Trigger.h"
#include "BitsIoLdd2.h"
#include "SW1.h"
#include "BitIoLdd1.h"
#include "SW2.h"
#include "BitIoLdd2.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
  /* Write your local variable definition here */
	unsigned char s7CA[]={0x40,0xf9,0x24,0x30,0x19,0x12,0x02,0xf8,0x00,0x10,0x08,0x03,0x46,0x21,0x06,0x0e};
	unsigned int p1,p2,p3,p4,k; 
	int i=0,j=0;
	long int z;
	
	Datapin_PutVal(s7CA[0x40]);
	
  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  /* For example: for(;;) { } */
while(1)
{
	if(SW1_GetVal()==0)
	{
		j++;
		 if(j==10)
		    	  {
		    		  j = 0;                                                                               
		    		  i++ ;
		    	  }
		        Datapin_PutVal(s7CA[j]);
		 		Datapin_PutVal(s7CA[i]);
	for(p1=0;p1<6;p1++)
	 {
		 for(p2=0;p2<9;p2++)
		 {
			 for(p3=0;p3<6;p3++)
			 {
				 for(p4=0;p4<9;p4++)
				 {
	  
					 for(k=0;k<50;k++)
					 {
	             Datapin_PutVal(s7CA[p1]);
	             Trigger_PutVal(0x7);
	             for(z=0;z<0x100fff;z++);
	             //Trigger_SetVal(0x7);
	             p1++;
	           
	             Datapin_PutVal(s7CA[p2]);
	             Trigger_PutVal(0xb);
	             for(z=0;z<0x100fff;z++);
	             //Trigger_SetVal(0xb);
	             p2++;
	         
	             Datapin_PutVal(s7CA[p3]);
	             Trigger_PutVal(0xd);
	             for(z=0;z<0x100fff;z++);
	             //Trigger_SetVal(0xd);
	             p3++;
	             
	             Datapin_PutVal(s7CA[p4]); 
	             Trigger_PutVal(0xe);
	             for(z=0;z<0x100fff;z++);
	             //Trigger_SetVal(0xe);
	             p4++;
	         
	}
		}
		}
		}
		}
	}
	
	// switch-2 
	if(SW2_GetVal()==0)
		{
			j--;
			 if(j==-1)
			    	  {
			    		  j = 9;                                                                               
			    		  i--;
			    	  }
			    Datapin_PutVal(s7CA[j]);
			    Datapin_PutVal(s7CA[i]);
		for(p1=0;p1<6;p1--)
		 {
			 for(p2=0;p2<9;p2--)
			 {
				 for(p3=0;p3<6;p3--)
				 {
					 for(p4=0;p4<9;p4--)
					 {
		  
						 for(k=0;k<50;k++)
						 {
		             Datapin_PutVal(s7CA[p1]);
		             Trigger_PutVal(0x7);
		             for(z=0;z<0x100fff;z++);
		            // Trigger_SetVal(0x7);
		             p1--;
		           
		             Datapin_PutVal(s7CA[p2]);
		             Trigger_PutVal(0xb);
		             for(z=0;z<0x100fff;z++);
		             //Trigger_SetVal(0xb);
		             p2--;
		         
		             Datapin_PutVal(s7CA[p3]);
		             Trigger_PutVal(0xd);
		             for(z=0;z<0x100fff;z++);
		             //Trigger_SetVal(0xd);
		             p3--;
		             
		             Datapin_PutVal(s7CA[p4]); 
		             Trigger_PutVal(0xe);
		             for(z=0;z<0x100fff;z++);
		             //Trigger_SetVal(0xe);
		             p4--;
		         
		}
			}
			}
			}
			}
		}

}
  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END ProcessorExpert */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/








///////-------///////////////////////


 Row_SetDir(0);
	  switch(a)
	  {
	  case 0xe:Row_GetDir();
	           Row_PutVal(1);
	           break;
	  case 0xd:Row_GetDir();
	 	           Row_PutVal(1);
	 	           break;
	  case 0xb:Row_GetDir();
	 	           Row_PutVal(1);
	 	           break;
	  case 0x7:Row_GetDir();
	 	           Row_PutVal(1);
	 	           break;
	 		  		  	  
      }
	  Column_SetDir(0);
     switch(b)
	 	  {
	 	  case 0x7:Column_GetDir();
	 	           Row_PutVal(1);
	 	           break;
	 	  case 0xb:Column_GetDir();
	 	 	       Row_PutVal(1);
	 	 	       break;
	 	  case 0xd:Column_GetDir();
	 	 	       Row_PutVal(1);
	 	 	       break;
	 	  case 0xe:Column_GetDir();
	 	 	       Row_PutVal(1);
	 	 	       break;
	 	 		  		  	  
	       }
                                                                          











